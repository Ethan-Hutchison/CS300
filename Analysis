  Based on the advisorâ€™s requirements all three data structures have their own advantages and disadvantages. For vectors the advantages are that it is simple to set up and works well with the small amount of data we need to store so it is faster. They have a worst case runtime O(1) normally but when adding or removing elements it becomes O(n) so the worst case runtime of adding or removing elements is then O(n^2) The disadvantages of it are that elements are not easily inserted and sorted into the vector. Hash tables can insert, delete, and call elements easily. Their worst case runtime for inserting elements is O(1) but can become O(n) if all keys hash to the same value. This results in the worst case being O(n) A disadvantage is that it is slower than other methods. A tree can organize data easier and allows for easier expansion but a disadvantage to it is speed. It has a worst case runtime of O(log n) when balanced and O(n) when unbalanced.
  From the three data structures I would pick a hash table. Since the goal of the project is to create a system that sorts and prints the courses, I believe that a hash table would be easier for sorting the courses while also being flexible enough for them to add more courses later or take some out. And because it has the best worst case runtime especially for adding and removing elements, that makes it a more suitable choice also.
